{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'https://raw.githubusercontent.com/jinchen003/Nearabl.Sample.Data/main/us-500.csv';\nexport const fetchData = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    console.log('Raw CSV Data:', response.data); // Debugging line\n    const data = parseCSV(response.data);\n    console.log('Parsed Data:', data); // Debugging line\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\nconst parseCSV = data => {\n  const lines = data.split('\\n').filter(line => line.trim() !== ''); // Skip empty lines\n  const result = [];\n  const headers = lines[0].split(',');\n  for (let i = 1; i < lines.length; i++) {\n    const obj = {};\n    const currentLine = lines[i].split(',');\n    for (let j = 0; j < headers.length; j++) {\n      var _currentLine$j;\n      obj[headers[j].trim()] = ((_currentLine$j = currentLine[j]) === null || _currentLine$j === void 0 ? void 0 : _currentLine$j.trim()) || '';\n    }\n    result.push(obj);\n  }\n  return result;\n};","map":{"version":3,"names":["axios","API_URL","fetchData","response","get","console","log","data","parseCSV","error","lines","split","filter","line","trim","result","headers","i","length","obj","currentLine","j","_currentLine$j","push"],"sources":["/Users/abubakardiallo/Desktop/neARable/nearable/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://raw.githubusercontent.com/jinchen003/Nearabl.Sample.Data/main/us-500.csv';\n\nexport const fetchData = async () => {\n    try {\n        const response = await axios.get(API_URL);\n        console.log('Raw CSV Data:', response.data); // Debugging line\n        const data = parseCSV(response.data);\n        console.log('Parsed Data:', data); // Debugging line\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n};\n\nconst parseCSV = (data: string) => {\n    const lines = data.split('\\n').filter(line => line.trim() !== ''); // Skip empty lines\n    const result: any[] = [];\n    const headers = lines[0].split(',');\n\n    for (let i = 1; i < lines.length; i++) {\n        const obj: any = {};\n        const currentLine = lines[i].split(',');\n\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j].trim()] = currentLine[j]?.trim() || '';\n        }\n        result.push(obj);\n    }\n    return result;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kFAAkF;AAElG,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzCI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAC7C,MAAMA,IAAI,GAAGC,QAAQ,CAACL,QAAQ,CAACI,IAAI,CAAC;IACpCF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,IAAI,CAAC,CAAC,CAAC;IACnC,OAAOA,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMD,QAAQ,GAAID,IAAY,IAAK;EAC/B,MAAMG,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACnE,MAAMC,MAAa,GAAG,EAAE;EACxB,MAAMC,OAAO,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;EAEnC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,GAAQ,GAAG,CAAC,CAAC;IACnB,MAAMC,WAAW,GAAGV,KAAK,CAACO,CAAC,CAAC,CAACN,KAAK,CAAC,GAAG,CAAC;IAEvC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACE,MAAM,EAAEG,CAAC,EAAE,EAAE;MAAA,IAAAC,cAAA;MACrCH,GAAG,CAACH,OAAO,CAACK,CAAC,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,GAAG,EAAAQ,cAAA,GAAAF,WAAW,CAACC,CAAC,CAAC,cAAAC,cAAA,uBAAdA,cAAA,CAAgBR,IAAI,CAAC,CAAC,KAAI,EAAE;IACzD;IACAC,MAAM,CAACQ,IAAI,CAACJ,GAAG,CAAC;EACpB;EACA,OAAOJ,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}