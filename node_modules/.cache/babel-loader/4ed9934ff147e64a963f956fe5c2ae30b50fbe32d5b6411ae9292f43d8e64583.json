{"ast":null,"code":"import axios from 'axios';\nimport Papa from 'papaparse';\nconst API_URL = 'https://raw.githubusercontent.com/jinchen003/Nearabl.Sample.Data/main/us-500.csv';\nexport const fetchData = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    const parsed = Papa.parse(response.data, {\n      header: true,\n      // Automatically use the first row as headers\n      skipEmptyLines: true\n    });\n    console.log('Parsed Data:', parsed.data); // Debugging line\n    return parsed.data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\nconst parseCSV = data => {\n  const lines = data.split('\\n').filter(line => line.trim() !== ''); // Skip empty lines\n  if (lines.length < 2) {\n    console.error('CSV data is empty or malformed');\n    return [];\n  }\n  const headers = lines[0].split(',').map(header => header.trim()); // Trim headers\n  const result = [];\n  for (let i = 1; i < lines.length; i++) {\n    const currentLine = lines[i].split(',').map(value => value.trim()); // Trim values\n    if (currentLine.length !== headers.length) {\n      console.warn(`Skipping malformed line: ${lines[i]}`);\n      continue;\n    }\n    const obj = {};\n    for (let j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentLine[j];\n    }\n    result.push(obj);\n  }\n  return result;\n};","map":{"version":3,"names":["axios","Papa","API_URL","fetchData","response","get","parsed","parse","data","header","skipEmptyLines","console","log","error","parseCSV","lines","split","filter","line","trim","length","headers","map","result","i","currentLine","value","warn","obj","j","push"],"sources":["/Users/abubakardiallo/Desktop/neARable/nearable/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport Papa from 'papaparse';\n\nconst API_URL = 'https://raw.githubusercontent.com/jinchen003/Nearabl.Sample.Data/main/us-500.csv';\n\nexport const fetchData = async () => {\n    try {\n        const response = await axios.get(API_URL);\n\n        const parsed = Papa.parse(response.data, {\n            header: true, // Automatically use the first row as headers\n            skipEmptyLines: true,\n        });\n\n        console.log('Parsed Data:', parsed.data); // Debugging line\n        return parsed.data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n};\n\nconst parseCSV = (data: string) => {\n    const lines = data.split('\\n').filter(line => line.trim() !== ''); // Skip empty lines\n    if (lines.length < 2) {\n        console.error('CSV data is empty or malformed');\n        return [];\n    }\n\n    const headers = lines[0].split(',').map(header => header.trim()); // Trim headers\n    const result: any[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n        const currentLine = lines[i].split(',').map(value => value.trim()); // Trim values\n        if (currentLine.length !== headers.length) {\n            console.warn(`Skipping malformed line: ${lines[i]}`);\n            continue;\n        }\n\n        const obj: any = {};\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentLine[j];\n        }\n        result.push(obj);\n    }\n\n    return result;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,WAAW;AAE5B,MAAMC,OAAO,GAAG,kFAAkF;AAElG,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACH,OAAO,CAAC;IAEzC,MAAMI,MAAM,GAAGL,IAAI,CAACM,KAAK,CAACH,QAAQ,CAACI,IAAI,EAAE;MACrCC,MAAM,EAAE,IAAI;MAAE;MACdC,cAAc,EAAE;IACpB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IAC1C,OAAOF,MAAM,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMC,QAAQ,GAAIN,IAAY,IAAK;EAC/B,MAAMO,KAAK,GAAGP,IAAI,CAACQ,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACnE,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;IAClBT,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;IAC/C,OAAO,EAAE;EACb;EAEA,MAAMQ,OAAO,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAACb,MAAM,IAAIA,MAAM,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClE,MAAMI,MAAa,GAAG,EAAE;EAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACK,MAAM,EAAEI,CAAC,EAAE,EAAE;IACnC,MAAMC,WAAW,GAAGV,KAAK,CAACS,CAAC,CAAC,CAACR,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAACI,KAAK,IAAIA,KAAK,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,IAAIM,WAAW,CAACL,MAAM,KAAKC,OAAO,CAACD,MAAM,EAAE;MACvCT,OAAO,CAACgB,IAAI,CAAC,4BAA4BZ,KAAK,CAACS,CAAC,CAAC,EAAE,CAAC;MACpD;IACJ;IAEA,MAAMI,GAAQ,GAAG,CAAC,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACD,MAAM,EAAES,CAAC,EAAE,EAAE;MACrCD,GAAG,CAACP,OAAO,CAACQ,CAAC,CAAC,CAAC,GAAGJ,WAAW,CAACI,CAAC,CAAC;IACpC;IACAN,MAAM,CAACO,IAAI,CAACF,GAAG,CAAC;EACpB;EAEA,OAAOL,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}